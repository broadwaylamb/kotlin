/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners.ir.interpreter;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/ir/interpreter/partial")
@TestDataPath("$PROJECT_ROOT")
public class IrPartialInterpreterTestGenerated extends AbstractIrPartialInterpreterTest {
    @Test
    public void testAllFilesPresentInPartial() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/ir/interpreter/partial"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("branches.kt")
    public void testBranches() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/branches.kt");
    }

    @Test
    @TestMetadata("callsOnly.kt")
    public void testCallsOnly() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/callsOnly.kt");
    }

    @Test
    @TestMetadata("forLoop.kt")
    public void testForLoop() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/forLoop.kt");
    }

    @Test
    @TestMetadata("inlineCompareBy.kt")
    public void testInlineCompareBy() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/inlineCompareBy.kt");
    }

    @Test
    @TestMetadata("inlineToString.kt")
    public void testInlineToString() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/inlineToString.kt");
    }

    @Test
    @TestMetadata("simpleCostructorCall.kt")
    public void testSimpleCostructorCall() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/simpleCostructorCall.kt");
    }

    @Test
    @TestMetadata("typeOperators.kt")
    public void testTypeOperators() throws Exception {
        runTest("compiler/testData/ir/interpreter/partial/typeOperators.kt");
    }
}
